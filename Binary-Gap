def solution(N):
    """
    Gives back the biggest `binary gap` in an integer
    
    Converts the integer to a binary string
    Iterates through the characters
    When a zero is encountered, starts the curr_gap counter
    Counts sequences of zeros
    When a non-zero (1) character is encoundered, compares curr_gap with max_gap
    Stores and updates the longest sequence into max_gap
    Restarts the curr_gap counter.
    Returns the biggest gap after character iteration is finished.
    
    Parameters
    ----------
    N (int): a positive integer between 1 and maxint (2,147,483,647)
        
    Returns
    -------
    int: longest continuous sequence of zeros in the binary representation of the input integer
    
    """
    binary_str = str(bin(N)[2:])
    curr_gap = max_gap = 0
    for c in binary_str:
        if c == '0':
            curr_gap += 1
        else:
            max_gap = max(curr_gap, max_gap)
            curr_gap = 0
    return int(max_gap)
    
    class TestBinaryGap(unittest.TestCase):
    MAXINT = 2147483647  # The largest input we need worry about.

    def test_examples(self):
        self.assertEqual(solution(9), 2)
        self.assertEqual(solution(529), 4)
        self.assertEqual(solution(20), 1)
        self.assertEqual(solution(15), 0)
        self.assertEqual(solution(32), 0)

    def test_example1(self):
        self.assertEqual(5, solution(1041))

    def test_example2(self):
        self.assertEqual(0, solution(15))

    def test_extremes(self):
        self.assertEqual(0, solution(1))
        self.assertEqual(1, solution(5))
        self.assertEqual(0, solution(self.MAXINT))

    def test_trailing_zeros(self):
        self.assertEqual(solution(6), 0)
        self.assertEqual(solution(328), 2)

    def test_simple1(self):
        self.assertEqual(solution(9), 2)
        self.assertEqual(solution(11), 1)
        self.assertEqual(solution(32), 0)

    def test_simple2(self):
        self.assertEqual(solution(19), 2)
        self.assertEqual(solution(42), 1)

    def test_simple3(self):
        self.assertEqual(solution(1162), 3)
        self.assertEqual(solution(5), 1)

    def test_medium1(self):
        self.assertEqual(solution(51712), 2)
        self.assertEqual(solution(20), 1)

    def test_medium2(self):
        self.assertEqual(solution(561892), 3)
        self.assertEqual(solution(9), 2)

    def test_medium3(self):
        self.assertEqual(solution(66561), 9)

    def test_large1(self):
        self.assertEqual(solution(6291457), 20)

    def test_large2(self):
        self.assertEqual(solution(74901729), 4)

    def test_large3(self):
        self.assertEqual(solution(805306369), 27)

    def test_large4(self):
        self.assertEqual(solution(1376796946), 5)

    def test_large5(self):
        self.assertEqual(solution(1073741825), 29)

    def test_large6(self):
        self.assertEqual(solution(1610612737), 28)
        
if __name__ == '__main__':
    unittest.main(argv=['first-arg-is-ignored'], exit=False)
